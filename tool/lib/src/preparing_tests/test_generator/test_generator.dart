import 'dart:io';

import 'package:cli_util/cli_logging.dart';
import 'package:fast_flutter_driver_tool/src/preparing_tests/file_system.dart';
import 'package:meta/meta.dart';
import 'package:path/path.dart' as p;

const aggregatedTestFile = 'generic_test.dart';
const setupMainFile = 'generic.dart';

Future<String> aggregatedTest(String directoryPath, Logger logger) async {
  final dir = Directory(directoryPath);
  final setupFile = dir.findOrNull(
        setupMainFile,
        recursive: true,
      ) ??
      Directory.current.findOrNull(
        setupMainFile,
        recursive: true,
      );
  if (setupFile == null) {
    return null;
  }

  final genericTestFile =
      File(platformPath(p.join(p.dirname(setupFile), aggregatedTestFile)));
  if (!genericTestFile.existsSync()) {
    genericTestFile.createSync();
  }
  logger?.trace('Generating test file');
  await generateTestFile(
    genericTestFile,
    Directory(directoryPath),
    '../',
    hasArguments: true,
  );
  logger?.trace('Done generating test file');

  return genericTestFile.path;
}

Future<void> generateTestFile(
  File genericTestFile,
  Directory testDir,
  String importPrefix, {
  @required bool hasArguments,
}) {
  final files = testFiles(testDir, aggregatedTestFile).map((e) {
    final fromContentRoot = e.replaceFirst(testDir.path, '');
    return fromContentRoot.startsWith('/') || fromContentRoot.startsWith(r'\')
        ? fromContentRoot.substring(1)
        : fromContentRoot;
  }).toList();
  return _writeGeneratedTest(
    files,
    genericTestFile,
    importPrefix,
    hasArguments: hasArguments,
  );
}

List<String> testFiles(Directory testDir, String excludedFile) {
  return testDir
      .listSync(recursive: true)
      .where((file) => file.path.endsWith('_test.dart'))
      .where((file) => !file.path.endsWith(excludedFile))
      .map((file) => file.path)
      .toList(growable: false);
}

Future<void> _writeGeneratedTest(
  List<String> testFiles,
  File test,
  String importPrefix, {
  @required bool hasArguments,
}) async {
  final file = test.openWrite()
    ..writeln('// ignore_for_file: directives_ordering')
    ..writeln(
      '/// This file is autogenerated and should not be committed to source control',
    )
    ..writeln('');
  for (final test in testFiles) {
    file.writeln(
        "import '$importPrefix${test.replaceAll(r'\', '/')}' as ${_importName(test)};");
  }
  file
    ..writeln('')
    ..writeln('void main(${hasArguments ? 'List<String> args' : ''}) {');
  for (final test in testFiles) {
    file.writeln('  ${_importName(test)}.main(${hasArguments ? 'args' : ''});');
  }
  file.writeln('}');
  await file.close();
}

String _importName(String path) => path
    .replaceAll('/', '_')
    .replaceAll(r'\', '_')
    .replaceAll('_test.dart', '');
