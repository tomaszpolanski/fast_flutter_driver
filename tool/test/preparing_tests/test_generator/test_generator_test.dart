import 'dart:io';

import 'package:cli_util/cli_logging.dart';
import 'package:fast_flutter_driver_tool/src/preparing_tests/test_generator/test_generator.dart';
import 'package:file/memory.dart';
import 'package:mockito/mockito.dart';
import 'package:test/test.dart';

void main() {
  TestGenerator generator;
  group('testFiles', () {
    setUp(() {
      generator = TestGenerator();
    });

    test('list test file', () {
      const testName = 'my_test.dart';
      final mockDir = _MockDirectory();
      when(mockDir.listSync(recursive: anyNamed('recursive')))
          .thenReturn([File(testName)]);

      final tested = generator.testFiles(mockDir, 'any');

      expect(tested, contains(testName));
    });

    test('skips non test files', () {
      const testName = 'my.dart';
      final mockDir = _MockDirectory();
      when(mockDir.listSync(recursive: anyNamed('recursive')))
          .thenReturn([File(testName)]);

      final tested = generator.testFiles(mockDir, 'any');

      expect(tested, isEmpty);
    });

    test('skips excluded file', () {
      const testName = 'my_test.dart';
      final mockDir = _MockDirectory();
      when(mockDir.listSync(recursive: anyNamed('recursive')))
          .thenReturn([File(testName)]);

      final tested = generator.testFiles(mockDir, testName);

      expect(tested, isEmpty);
    });
  });

  group('generateTestFile', () {
    File aggregatedFile;
    Directory mockDir;
    setUp(() {
      generator = TestGenerator();
      aggregatedFile = MemoryFileSystem().file('test.dart');
      mockDir = _MockDirectory();
      when(mockDir.path).thenReturn('/');
      when(mockDir.listSync(recursive: anyNamed('recursive'))).thenReturn([
        File('my_test.dart'),
      ]);
    });
    test('writes aggregated test file with args', () async {
      const content = '''
// ignore_for_file: directives_ordering
/// This file is autogenerated and should not be committed to source control

import 'my_test.dart' as my;

void main(List<String> args) {
  my.main(args);
}
''';

      await generator.generateTestFile(aggregatedFile, mockDir, '',
          hasArguments: true);

      expect(aggregatedFile.readAsStringSync(), content);
    });

    test('writes aggregated test file without args', () async {
      const content = '''
// ignore_for_file: directives_ordering
/// This file is autogenerated and should not be committed to source control

import 'my_test.dart' as my;

void main() {
  my.main();
}
''';

      await generator.generateTestFile(aggregatedFile, mockDir, '',
          hasArguments: false);

      expect(aggregatedFile.readAsStringSync(), content);
    });
  });

  group('aggregatedTest', () {
    setUp(() {
      generator = _MockTestGenerator();
    });
    test('generates test file', () {
      IOOverrides.runZoned(
        () async {
          final logger = _MockLogger();
          expect(await aggregatedTest('/', generator, logger), setupMainFile);
        },
        createDirectory: (name) {
          const absolutePath =
              r'c:\Users\tpolanski\Documents\GitHub\flutter-project';
          final file = _MockFile();
          when(file.path).thenReturn('$name$setupMainFile');
          final absoluteDir = _MockDirectory();
          when(absoluteDir.path).thenReturn('$absolutePath\\$name');
          final mockDir = _MockDirectory();
          when(mockDir.path).thenReturn(name);
          when(mockDir.listSync(recursive: anyNamed('recursive')))
              .thenReturn([file]);
          when(mockDir.absolute).thenReturn(absoluteDir);
          return mockDir;
        },
        createFile: (name) => MemoryFileSystem().file(setupMainFile),
      );
    });

    test('generate properly paths for not root folders', () {
      final absolutePath = Platform.isWindows
          ? r'c:\Users\tpolanski\Documents\GitHub\flutter-project'
          : '/Users/tpolanski/Documents/GitHub/flutter-project';
      IOOverrides.runZoned(
        () async {
          final logger = _MockLogger();

          await aggregatedTest(
              r'test_driver\deals\edits'.toPlatformPath, generator, logger);
          expect(
            verify(generator.generateTestFile(any, any, captureAny,
                    hasArguments: anyNamed('hasArguments')))
                .captured
                .single,
            '../deals/edits/',
          );
        },
        createDirectory: (name) {
          final file = _MockFile();
          when(file.path).thenReturn(
              '$absolutePath/test_driver/generic/generic.dart'.toPlatformPath);
          final absoluteDir = _MockDirectory();
          when(absoluteDir.path)
              .thenReturn('$absolutePath/$name'.toPlatformPath);
          final mockDir = _MockDirectory();
          when(mockDir.path).thenReturn(name);
          when(mockDir.listSync(recursive: anyNamed('recursive')))
              .thenReturn([file]);
          when(mockDir.absolute).thenReturn(absoluteDir);
          return mockDir;
        },
        createFile: (name) {
          if (name.endsWith(aggregatedTestFile)) {
            final absolute = _MockFile();
            when(absolute.path).thenReturn(name);
            final file = _MockFile();
            when(file.path).thenReturn(name);
            when(file.existsSync()).thenReturn(true);
            when(file.absolute).thenReturn(absolute);
            return file;
          }
          return MemoryFileSystem().file('$absolutePath\\$setupMainFile');
        },
      );
    });

    test('generate properly paths for root folder', () {
      final absolutePath = Platform.isWindows
          ? r'c:\Users\tpolanski\Documents\GitHub\flutter-project'
          : '/Users/tpolanski/Documents/GitHub/flutter-project';
      IOOverrides.runZoned(
        () async {
          final logger = _MockLogger();

          await aggregatedTest('test_driver', generator, logger);
          expect(
            verify(generator.generateTestFile(any, any, captureAny,
                    hasArguments: anyNamed('hasArguments')))
                .captured
                .single,
            '../',
          );
        },
        createDirectory: (name) {
          final file = _MockFile();
          when(file.path).thenReturn(
              '$absolutePath/test_driver/generic/generic.dart'.toPlatformPath);
          final absoluteDir = _MockDirectory();
          when(absoluteDir.path)
              .thenReturn('$absolutePath/$name'.toPlatformPath);
          final mockDir = _MockDirectory();
          when(mockDir.path).thenReturn(name);
          when(mockDir.listSync(recursive: anyNamed('recursive')))
              .thenReturn([file]);
          when(mockDir.absolute).thenReturn(absoluteDir);
          return mockDir;
        },
        createFile: (name) {
          if (name.endsWith(aggregatedTestFile)) {
            final absolute = _MockFile();
            when(absolute.path).thenReturn(name);
            final file = _MockFile();
            when(file.path).thenReturn(name);
            when(file.existsSync()).thenReturn(true);
            when(file.absolute).thenReturn(absolute);
            return file;
          }
          return MemoryFileSystem()
              .file('$absolutePath/$setupMainFile'.toPlatformPath);
        },
      );
    });
  });
}

class _MockDirectory extends Mock implements Directory {}

class _MockFile extends Mock implements File {}

class _MockLogger extends Mock implements Logger {}

class _MockTestGenerator extends Mock implements TestGenerator {}

extension on String {
  String get toPlatformPath =>
      Platform.isWindows ? replaceAll('/', r'\') : replaceAll(r'\', '/');
}
