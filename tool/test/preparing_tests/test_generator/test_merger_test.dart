import 'dart:io';

import 'package:fast_flutter_driver_tool/src/preparing_tests/test_generator/test_merger.dart'
    as main_file;
import 'package:file/memory.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:test/test.dart';

import '../../mocks/mock_file.dart';
import 'test_merger_test.mocks.dart';

@GenerateMocks([Directory])
void main() {
  test('creates test file', () {
    late File mergedFile;

    IOOverrides.runZoned(
      () async {
        const content = '''
// ignore_for_file: directives_ordering
/// This file is autogenerated and should not be committed to source control

import 'my_test.dart' as my;

void main() {
  my.main();
}
''';
        await main_file.main();

        expect(mergedFile, isNotNull);
        expect(mergedFile.path, endsWith('all_tests.dart'));
        expect(mergedFile.readAsStringSync(), content);
      },
      createDirectory: (name) {
        final mockDir = MockDirectory();

        when(mockDir.path).thenReturn(name);
        final file = NonMockitoFile()..pathMock = 'my_test.dart';
        when(mockDir.listSync(recursive: anyNamed('recursive')))
            .thenReturn([file]);

        return mockDir;
      },
      createFile: (name) {
        const testFile = 'all_tests.dart';
        if (name.endsWith(testFile)) {
          return mergedFile = MemoryFileSystem.test().file(testFile);
        } else {
          final file = NonMockitoFile()..pathMock = name;
          return file;
        }
      },
      getCurrentDirectory: () {
        final file = NonMockitoFile()..pathMock = 'my_test.dart';
        final mockDir = MockDirectory();
        when(mockDir.listSync(recursive: anyNamed('recursive')))
            .thenReturn([file]);
        when(mockDir.path).thenReturn('/');
        return mockDir;
      },
    );
  });
}
