// Mocks generated by Mockito 5.0.0-nullsafety.7 from annotations
// in fast_flutter_driver_tool/test/preparing_tests/testing_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:convert' as _i6;
import 'dart:io' as _i3;
import 'dart:typed_data' as _i4;

import 'package:cli_util/cli_logging.dart' as _i2;
import 'package:fast_flutter_driver_tool/src/preparing_tests/command_line/streams.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeAnsi extends _i1.Fake implements _i2.Ansi {}

class _FakeProgress extends _i1.Fake implements _i2.Progress {}

class _FakeFile extends _i1.Fake implements _i3.File {}

class _FakeDateTime extends _i1.Fake implements DateTime {}

class _FakeRandomAccessFile extends _i1.Fake implements _i3.RandomAccessFile {}

class _FakeIOSink extends _i1.Fake implements _i3.IOSink {}

class _FakeUint8List extends _i1.Fake implements _i4.Uint8List {}

class _FakeUri extends _i1.Fake implements Uri {}

class _FakeDirectory extends _i1.Fake implements _i3.Directory {}

class _FakeStreamController<T> extends _i1.Fake
    implements _i5.StreamController<T> {}

class _FakeDuration extends _i1.Fake implements Duration {}

/// A class which mocks [Logger].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogger extends _i1.Mock implements _i2.Logger {
  MockLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Ansi get ansi =>
      (super.noSuchMethod(Invocation.getter(#ansi), returnValue: _FakeAnsi())
          as _i2.Ansi);
  @override
  bool get isVerbose =>
      (super.noSuchMethod(Invocation.getter(#isVerbose), returnValue: false)
          as bool);
  @override
  void stderr(String? message) =>
      super.noSuchMethod(Invocation.method(#stderr, [message]),
          returnValueForMissingStub: null);
  @override
  void stdout(String? message) =>
      super.noSuchMethod(Invocation.method(#stdout, [message]),
          returnValueForMissingStub: null);
  @override
  void trace(String? message) =>
      super.noSuchMethod(Invocation.method(#trace, [message]),
          returnValueForMissingStub: null);
  @override
  void write(String? message) =>
      super.noSuchMethod(Invocation.method(#write, [message]),
          returnValueForMissingStub: null);
  @override
  void writeCharCode(int? charCode) =>
      super.noSuchMethod(Invocation.method(#writeCharCode, [charCode]),
          returnValueForMissingStub: null);
  @override
  _i2.Progress progress(String? message) =>
      (super.noSuchMethod(Invocation.method(#progress, [message]),
          returnValue: _FakeProgress()) as _i2.Progress);
}

/// A class which mocks [File].
///
/// See the documentation for Mockito's code generation for more information.
class MockFile extends _i1.Mock implements _i3.File {
  MockFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.File get absolute => (super.noSuchMethod(Invocation.getter(#absolute),
      returnValue: _FakeFile()) as _i3.File);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  _i5.Future<_i3.File> create({bool? recursive}) => (super.noSuchMethod(
      Invocation.method(#create, [], {#recursive: recursive}),
      returnValue: Future.value(_FakeFile())) as _i5.Future<_i3.File>);
  @override
  void createSync({bool? recursive}) => super.noSuchMethod(
      Invocation.method(#createSync, [], {#recursive: recursive}),
      returnValueForMissingStub: null);
  @override
  _i5.Future<_i3.File> rename(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#rename, [newPath]),
          returnValue: Future.value(_FakeFile())) as _i5.Future<_i3.File>);
  @override
  _i3.File renameSync(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#renameSync, [newPath]),
          returnValue: _FakeFile()) as _i3.File);
  @override
  _i5.Future<_i3.File> copy(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#copy, [newPath]),
          returnValue: Future.value(_FakeFile())) as _i5.Future<_i3.File>);
  @override
  _i3.File copySync(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#copySync, [newPath]),
          returnValue: _FakeFile()) as _i3.File);
  @override
  _i5.Future<int> length() =>
      (super.noSuchMethod(Invocation.method(#length, []),
          returnValue: Future.value(0)) as _i5.Future<int>);
  @override
  int lengthSync() =>
      (super.noSuchMethod(Invocation.method(#lengthSync, []), returnValue: 0)
          as int);
  @override
  _i5.Future<DateTime> lastAccessed() =>
      (super.noSuchMethod(Invocation.method(#lastAccessed, []),
          returnValue: Future.value(_FakeDateTime())) as _i5.Future<DateTime>);
  @override
  DateTime lastAccessedSync() =>
      (super.noSuchMethod(Invocation.method(#lastAccessedSync, []),
          returnValue: _FakeDateTime()) as DateTime);
  @override
  _i5.Future<dynamic> setLastAccessed(DateTime? time) =>
      (super.noSuchMethod(Invocation.method(#setLastAccessed, [time]),
          returnValue: Future.value(null)) as _i5.Future<dynamic>);
  @override
  void setLastAccessedSync(DateTime? time) =>
      super.noSuchMethod(Invocation.method(#setLastAccessedSync, [time]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<DateTime> lastModified() =>
      (super.noSuchMethod(Invocation.method(#lastModified, []),
          returnValue: Future.value(_FakeDateTime())) as _i5.Future<DateTime>);
  @override
  DateTime lastModifiedSync() =>
      (super.noSuchMethod(Invocation.method(#lastModifiedSync, []),
          returnValue: _FakeDateTime()) as DateTime);
  @override
  _i5.Future<dynamic> setLastModified(DateTime? time) =>
      (super.noSuchMethod(Invocation.method(#setLastModified, [time]),
          returnValue: Future.value(null)) as _i5.Future<dynamic>);
  @override
  void setLastModifiedSync(DateTime? time) =>
      super.noSuchMethod(Invocation.method(#setLastModifiedSync, [time]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<_i3.RandomAccessFile> open({_i3.FileMode? mode}) =>
      (super.noSuchMethod(Invocation.method(#open, [], {#mode: mode}),
              returnValue: Future.value(_FakeRandomAccessFile()))
          as _i5.Future<_i3.RandomAccessFile>);
  @override
  _i3.RandomAccessFile openSync({_i3.FileMode? mode}) =>
      (super.noSuchMethod(Invocation.method(#openSync, [], {#mode: mode}),
          returnValue: _FakeRandomAccessFile()) as _i3.RandomAccessFile);
  @override
  _i5.Stream<List<int>> openRead([int? start, int? end]) =>
      (super.noSuchMethod(Invocation.method(#openRead, [start, end]),
          returnValue: Stream<List<int>>.empty()) as _i5.Stream<List<int>>);
  @override
  _i3.IOSink openWrite({_i3.FileMode? mode, _i6.Encoding? encoding}) =>
      (super.noSuchMethod(
          Invocation.method(#openWrite, [], {#mode: mode, #encoding: encoding}),
          returnValue: _FakeIOSink()) as _i3.IOSink);
  @override
  _i5.Future<_i4.Uint8List> readAsBytes() =>
      (super.noSuchMethod(Invocation.method(#readAsBytes, []),
              returnValue: Future.value(_FakeUint8List()))
          as _i5.Future<_i4.Uint8List>);
  @override
  _i4.Uint8List readAsBytesSync() =>
      (super.noSuchMethod(Invocation.method(#readAsBytesSync, []),
          returnValue: _FakeUint8List()) as _i4.Uint8List);
  @override
  _i5.Future<String> readAsString({_i6.Encoding? encoding}) => (super
      .noSuchMethod(Invocation.method(#readAsString, [], {#encoding: encoding}),
          returnValue: Future.value('')) as _i5.Future<String>);
  @override
  String readAsStringSync({_i6.Encoding? encoding}) => (super.noSuchMethod(
      Invocation.method(#readAsStringSync, [], {#encoding: encoding}),
      returnValue: '') as String);
  @override
  _i5.Future<List<String>> readAsLines({_i6.Encoding? encoding}) => (super
      .noSuchMethod(Invocation.method(#readAsLines, [], {#encoding: encoding}),
          returnValue: Future.value(<String>[])) as _i5.Future<List<String>>);
  @override
  List<String> readAsLinesSync({_i6.Encoding? encoding}) => (super.noSuchMethod(
      Invocation.method(#readAsLinesSync, [], {#encoding: encoding}),
      returnValue: <String>[]) as List<String>);
  @override
  _i5.Future<_i3.File> writeAsBytes(List<int>? bytes,
          {_i3.FileMode? mode, bool? flush}) =>
      (super.noSuchMethod(
          Invocation.method(
              #writeAsBytes, [bytes], {#mode: mode, #flush: flush}),
          returnValue: Future.value(_FakeFile())) as _i5.Future<_i3.File>);
  @override
  void writeAsBytesSync(List<int>? bytes, {_i3.FileMode? mode, bool? flush}) =>
      super.noSuchMethod(
          Invocation.method(
              #writeAsBytesSync, [bytes], {#mode: mode, #flush: flush}),
          returnValueForMissingStub: null);
  @override
  _i5.Future<_i3.File> writeAsString(String? contents,
          {_i3.FileMode? mode, _i6.Encoding? encoding, bool? flush}) =>
      (super.noSuchMethod(
          Invocation.method(#writeAsString, [contents],
              {#mode: mode, #encoding: encoding, #flush: flush}),
          returnValue: Future.value(_FakeFile())) as _i5.Future<_i3.File>);
  @override
  void writeAsStringSync(String? contents,
          {_i3.FileMode? mode, _i6.Encoding? encoding, bool? flush}) =>
      super.noSuchMethod(
          Invocation.method(#writeAsStringSync, [contents],
              {#mode: mode, #encoding: encoding, #flush: flush}),
          returnValueForMissingStub: null);
}

/// A class which mocks [Directory].
///
/// See the documentation for Mockito's code generation for more information.
class MockDirectory extends _i1.Mock implements _i3.Directory {
  MockDirectory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  Uri get uri =>
      (super.noSuchMethod(Invocation.getter(#uri), returnValue: _FakeUri())
          as Uri);
  @override
  _i3.Directory get absolute =>
      (super.noSuchMethod(Invocation.getter(#absolute),
          returnValue: _FakeDirectory()) as _i3.Directory);
  @override
  _i5.Future<_i3.Directory> create({bool? recursive}) => (super.noSuchMethod(
          Invocation.method(#create, [], {#recursive: recursive}),
          returnValue: Future.value(_FakeDirectory()))
      as _i5.Future<_i3.Directory>);
  @override
  void createSync({bool? recursive}) => super.noSuchMethod(
      Invocation.method(#createSync, [], {#recursive: recursive}),
      returnValueForMissingStub: null);
  @override
  _i5.Future<_i3.Directory> createTemp([String? prefix]) =>
      (super.noSuchMethod(Invocation.method(#createTemp, [prefix]),
              returnValue: Future.value(_FakeDirectory()))
          as _i5.Future<_i3.Directory>);
  @override
  _i3.Directory createTempSync([String? prefix]) =>
      (super.noSuchMethod(Invocation.method(#createTempSync, [prefix]),
          returnValue: _FakeDirectory()) as _i3.Directory);
  @override
  _i5.Future<String> resolveSymbolicLinks() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinks, []),
          returnValue: Future.value('')) as _i5.Future<String>);
  @override
  String resolveSymbolicLinksSync() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinksSync, []),
          returnValue: '') as String);
  @override
  _i5.Future<_i3.Directory> rename(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#rename, [newPath]),
              returnValue: Future.value(_FakeDirectory()))
          as _i5.Future<_i3.Directory>);
  @override
  _i3.Directory renameSync(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#renameSync, [newPath]),
          returnValue: _FakeDirectory()) as _i3.Directory);
  @override
  _i5.Stream<_i3.FileSystemEntity> list({bool? recursive, bool? followLinks}) =>
      (super.noSuchMethod(
              Invocation.method(#list, [],
                  {#recursive: recursive, #followLinks: followLinks}),
              returnValue: Stream<_i3.FileSystemEntity>.empty())
          as _i5.Stream<_i3.FileSystemEntity>);
  @override
  List<_i3.FileSystemEntity> listSync({bool? recursive, bool? followLinks}) =>
      (super.noSuchMethod(
          Invocation.method(#listSync, [],
              {#recursive: recursive, #followLinks: followLinks}),
          returnValue: <_i3.FileSystemEntity>[]) as List<_i3.FileSystemEntity>);
  @override
  String toString() =>
      (super.noSuchMethod(Invocation.method(#toString, []), returnValue: '')
          as String);
}

/// A class which mocks [InputCommandLineStream].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputCommandLineStream extends _i1.Mock
    implements _i7.InputCommandLineStream {
  MockInputCommandLineStream() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.StreamController<String> get input =>
      (super.noSuchMethod(Invocation.getter(#input),
              returnValue: _FakeStreamController<String>())
          as _i5.StreamController<String>);
  @override
  set input(_i5.StreamController<String>? _input) =>
      super.noSuchMethod(Invocation.setter(#input, _input),
          returnValueForMissingStub: null);
  @override
  _i5.Stream<List<int>> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
          returnValue: Stream<List<int>>.empty()) as _i5.Stream<List<int>>);
  @override
  void write(String? line) =>
      super.noSuchMethod(Invocation.method(#write, [line]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
}

/// A class which mocks [Progress].
///
/// See the documentation for Mockito's code generation for more information.
class MockProgress extends _i1.Mock implements _i2.Progress {
  MockProgress() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
  @override
  Duration get elapsed => (super.noSuchMethod(Invocation.getter(#elapsed),
      returnValue: _FakeDuration()) as Duration);
  @override
  void finish({String? message, bool? showTiming = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #finish, [], {#message: message, #showTiming: showTiming}),
          returnValueForMissingStub: null);
}
