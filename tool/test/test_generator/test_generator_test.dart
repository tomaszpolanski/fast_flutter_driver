import 'dart:io';

import 'package:file/memory.dart';
import 'package:mockito/mockito.dart';
import 'package:test/test.dart';

import 'file:///C:/Users/tpolanski/Documents/GitHub/fast_flutter_driver/tool/lib/src/preparing_tests/test_generator/test_generator.dart';

void main() {
  group('testFiles', () {
    test('list test file', () {
      const testName = 'my_test.dart';
      final mockDir = _MockDirectory();
      when(mockDir.listSync(recursive: anyNamed('recursive')))
          .thenReturn([File(testName)]);

      final tested = testFiles(mockDir, 'any');

      expect(tested, contains(testName));
    });

    test('skips non test files', () {
      const testName = 'my.dart';
      final mockDir = _MockDirectory();
      when(mockDir.listSync(recursive: anyNamed('recursive')))
          .thenReturn([File(testName)]);

      final tested = testFiles(mockDir, 'any');

      expect(tested, isEmpty);
    });

    test('skips excluded file', () {
      const testName = 'my_test.dart';
      final mockDir = _MockDirectory();
      when(mockDir.listSync(recursive: anyNamed('recursive')))
          .thenReturn([File(testName)]);

      final tested = testFiles(mockDir, testName);

      expect(tested, isEmpty);
    });
  });

  group('generateTestFile', () {
    const content = '''
// ignore_for_file: directives_ordering
/// This file is autogenerated and should not be committed to source control

import 'my_test.dart' as my;
import 'folder/my_test.dart' as folder_my;

void main(List<String> args) {
  my.main(args);
  folder_my.main(args);
}
''';
    test('writes aggregated test file', () async {
      final aggregatedFile = MemoryFileSystem().file('test.dart');
      final mockDir = _MockDirectory();
      when(mockDir.listSync(recursive: anyNamed('recursive'))).thenReturn([
        File('my_test.dart'),
        File('folder/my_test.dart'),
      ]);

      await generateTestFile(aggregatedFile, mockDir, '');

      expect(aggregatedFile.readAsStringSync(), content);
    });
  });
}

class _MockDirectory extends Mock implements Directory {}
